name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/requirements*.in') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip pip-tools
        pip-compile requirements.in --output-file=requirements.txt
        pip install -r requirements.txt
        pip check
        pip install safety bandit pip-audit
        sudo apt-get update && sudo apt-get install -y jq
    
    - name: Run linting
      run: |
        black . --check
        isort . --check-only
        flake8 .
        mypy .
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
      run: |
        pytest --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip pip-tools
        pip-compile requirements.in --output-file=requirements.txt
        pip install -r requirements.txt
        pip check
        pip install safety bandit pip-audit
    
    - name: Run safety checks
      run: |
        echo "Running safety checks..."
        safety scan || echo "Safety scan completed with warnings"
    
    - name: Run bandit security checks
      run: |
        echo "Running bandit security checks..."
        bandit -r src/ -f json -o bandit-results.json || echo "Bandit scan completed with warnings"
        
        # Check if bandit-results.json exists and has content
        if [ -s bandit-results.json ]; then
          echo "Converting Bandit results to SARIF format..."
          # Convert Bandit JSON to SARIF format using jq
          jq -n --arg results "$(cat bandit-results.json | jq -c '.results')" '{
            "version": "2.1.0",
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Bandit",
                    "version": "1.8.5",
                    "informationUri": "https://bandit.readthedocs.io/"
                  }
                },
                "results": ($results | fromjson | map({
                  "message": {
                    "text": .issue_text
                  },
                  "level": (if .issue_severity == "HIGH" then "error" elif .issue_severity == "MEDIUM" then "warning" else "note" end),
                  "locations": [{
                    "physicalLocation": {
                      "artifactLocation": {
                        "uri": .filename
                      },
                      "region": {
                        "startLine": .line_number,
                        "startColumn": .col_offset,
                        "endColumn": .end_col_offset
                      }
                    }
                  }],
                  "properties": {
                    "issue_confidence": .issue_confidence,
                    "issue_cwe": .issue_cwe,
                    "test_id": .test_id,
                    "test_name": .test_name,
                    "more_info": .more_info
                  }
                }))
              }
            ]
          }' > bandit-sarif.json
        else
          echo "No security issues found by Bandit"
          # Create empty SARIF file
          echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"Bandit","version":"1.8.5","informationUri":"https://bandit.readthedocs.io/"}},"results":[]}]}' > bandit-sarif.json
        fi
    
    - name: Run pip-audit
      run: |
        echo "Running pip-audit..."
        pip-audit || echo "pip-audit completed with warnings"
    
    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-sarif.json
        fail_on_error: false

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and test Docker image
      run: |
        echo "Building Docker image..."
        docker build -t sentient-avatar:test .
        
        echo "Starting container for health check..."
        docker run -d --name test-container \
          --health-cmd="wget --no-verbose --tries=1 --spider http://localhost:8000/health || exit 1" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=3 \
          sentient-avatar:test
        
        echo "Waiting for container to be healthy..."
        # Wait for container to be healthy with timeout and better error handling
        timeout 60s bash -c '
          while true; do
            status=$(docker inspect -f {{.State.Health.Status}} test-container)
            echo "Container health status: $status"
            if [ "$status" = "healthy" ]; then
              echo "Container is healthy"
              exit 0
            elif [ "$status" = "unhealthy" ]; then
              echo "Container is unhealthy"
              exit 1
            fi
            sleep 2
          done
        ' || {
          echo "Container health check failed"
          docker logs test-container
          exit 1
        }
        
        echo "Cleaning up test container..."
        docker stop test-container || true
        docker rm test-container || true
    
    - name: Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'sentient-avatar:test'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        fail-on: 'CRITICAL,HIGH' 