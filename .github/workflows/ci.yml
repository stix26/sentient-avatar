name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 0'  # Run weekly on Sunday at 2 AM UTC

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '16'
  REDIS_VERSION: '7'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/requirements*.in', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq postgresql-client curl
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip pip-tools setuptools wheel
        pip-compile requirements.in --output-file=requirements.txt
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip check
    
    - name: Run code formatting checks
      run: |
        echo "Checking code formatting..."
        black . --check --diff
        isort . --check-only --diff
        echo "‚úÖ Code formatting checks passed"
    
    - name: Run linting
      run: |
        echo "Running linting checks..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        echo "‚úÖ Linting checks passed"
    
    - name: Run type checking
      run: |
        echo "Running type checks..."
        mypy src/ --ignore-missing-imports --no-strict-optional
        echo "‚úÖ Type checks passed"
    
    - name: Wait for services
      run: |
        echo "Waiting for PostgreSQL..."
        for i in {1..30}; do
          if pg_isready -h localhost -U postgres; then
            echo "‚úÖ PostgreSQL is ready"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done
        
        echo "Waiting for Redis..."
        for i in {1..30}; do
          if redis-cli -h localhost ping; then
            echo "‚úÖ Redis is ready"
            break
          fi
          echo "Waiting for Redis... ($i/30)"
          sleep 2
        done
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_ci_workflow_2024
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
        ENVIRONMENT: test
        LOG_LEVEL: DEBUG
      run: |
        echo "Running tests with coverage..."
        pytest \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --durations=10 \
          --tb=short \
          --strict-markers \
          --disable-warnings \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip pip-tools
        pip-compile requirements.in --output-file=requirements.txt
        pip install -r requirements.txt
        pip install safety bandit pip-audit semgrep
    
    - name: Run Safety vulnerability scan
      run: |
        echo "üîç Running Safety vulnerability scan..."
        safety scan --json --output safety-report.json || {
          echo "‚ö†Ô∏è Safety scan found vulnerabilities"
          cat safety-report.json | jq '.vulnerabilities[] | "\(.package_name): \(.vulnerability_id) - \(.advisory)"' || true
        }
    
    - name: Run Bandit security linter
      run: |
        echo "üîç Running Bandit security checks..."
        bandit -r src/ -f json -o bandit-results.json -ll || {
          echo "‚ö†Ô∏è Bandit found security issues"
          cat bandit-results.json | jq '.results[] | "\(.filename):\(.line_number) - \(.issue_text)"' || true
        }
        
        # Convert to SARIF for GitHub Security tab
        if [ -s bandit-results.json ]; then
          jq -n --arg results "$(cat bandit-results.json | jq -c '.results')" '{
            "version": "2.1.0",
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Bandit",
                    "version": "1.8.5",
                    "informationUri": "https://bandit.readthedocs.io/"
                  }
                },
                "results": ($results | fromjson | map({
                  "message": {
                    "text": .issue_text
                  },
                  "level": (if .issue_severity == "HIGH" then "error" elif .issue_severity == "MEDIUM" then "warning" else "note" end),
                  "locations": [{
                    "physicalLocation": {
                      "artifactLocation": {
                        "uri": .filename
                      },
                      "region": {
                        "startLine": .line_number,
                        "startColumn": (.col_offset + 1),
                        "endColumn": (.end_col_offset + 1)
                      }
                    }
                  }],
                  "properties": {
                    "issue_confidence": .issue_confidence,
                    "issue_cwe": .issue_cwe,
                    "test_id": .test_id,
                    "test_name": .test_name,
                    "more_info": .more_info
                  }
                }))
              }
            ]
          }' > bandit-sarif.json
        else
          echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"Bandit","version":"1.8.5","informationUri":"https://bandit.readthedocs.io/"}},"results":[]}]}' > bandit-sarif.json
        fi
    
    - name: Run pip-audit
      run: |
        echo "üîç Running pip-audit..."
        pip-audit --format json --output pip-audit-report.json || {
          echo "‚ö†Ô∏è pip-audit found vulnerabilities"
          cat pip-audit-report.json | jq '.vulnerabilities[] | "\(.package_name): \(.vulnerability_id) - \(.description)"' || true
        }
    
    - name: Run Semgrep SAST scan
      run: |
        echo "üîç Running Semgrep SAST scan..."
        semgrep scan --config auto --json --output semgrep-results.json || {
          echo "‚ö†Ô∏è Semgrep found issues"
          cat semgrep-results.json | jq '.results[] | "\(.path):\(.start.line) - \(.message)"' || true
        }
    
    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-sarif.json
        fail_on_error: false

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.12.0
    
    - name: Build Docker image
      run: |
        echo "üê≥ Building Docker image..."
        docker build \
          --tag sentient-avatar:ci \
          --tag sentient-avatar:latest \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          .
        
        echo "‚úÖ Docker image built successfully"
        docker images sentient-avatar
    
    - name: Test Docker image
      run: |
        echo "üß™ Testing Docker image..."
        
        # Create test network
        docker network create test-network || true
        
        # Start PostgreSQL container
        docker run -d --name test-postgres \
          --network=test-network \
          --network-alias postgres \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_DB=test_db \
          --health-cmd="pg_isready -U postgres" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=5 \
          postgres:16
        
        # Wait for PostgreSQL
        echo "Waiting for PostgreSQL to be ready..."
        timeout 60s bash -c '
          while ! docker exec test-postgres pg_isready -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
        '
        
        # Start application container
        docker run -d --name test-app \
          --network=test-network \
          -p 8000:8000 \
          -e DATABASE_URL=postgresql://postgres:postgres@postgres:5432/test_db \
          -e REDIS_URL=redis://localhost:6379/0 \
          -e SECRET_KEY=test_secret_key_for_docker_test \
          -e ENVIRONMENT=test \
          sentient-avatar:ci
        
        # Wait for application to start
        echo "Waiting for application to start..."
        timeout 120s bash -c '
          while ! curl -f http://localhost:8000/health; do
            echo "Waiting for application..."
            sleep 5
          done
        '
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:8000/health | jq .
        
        # Test API endpoints
        echo "Testing API endpoints..."
        curl -f http://localhost:8000/docs || echo "Docs endpoint not available"
        curl -f http://localhost:8000/openapi.json || echo "OpenAPI spec not available"
        
        echo "‚úÖ Docker image test passed"
    
    - name: Cleanup test containers
      if: always()
      run: |
        echo "üßπ Cleaning up test containers..."
        docker stop test-app test-postgres || true
        docker rm test-app test-postgres || true
        docker network rm test-network || true
    
    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'sentient-avatar:ci'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        fail-on: 'CRITICAL'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
        fail_on_error: false

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, Unlicense

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python" 